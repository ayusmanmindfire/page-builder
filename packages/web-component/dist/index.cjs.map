{"version":3,"sources":["../src/index.ts","../src/components/PageBuilder.ts"],"sourcesContent":["export * from './components/PageBuilder';\n","import { PageBuilder } from '@mindfiredigital/page-builder-core/dist/PageBuilder.js';\n\nexport class PageBuilderComponent extends HTMLElement {\n  private pageBuilder!: PageBuilder;\n  private initialized = false;\n\n  constructor() {\n    super();\n    \n    // Set up inner HTML structure\n    this.innerHTML = `\n      <div id=\"app\">\n        <div id=\"sidebar\"></div>\n        <div id=\"canvas\" class=\"canvas\"></div>\n        <div id=\"customization\">\n          <h4 id=\"component-name\">Component: None</h4>\n          <div id=\"controls\"></div>\n          <div id=\"layers-view\" class=\"hidden\"></div>\n        </div>\n        <div id=\"notification\" class=\"notification hidden\"></div>\n        <div id=\"dialog\" class=\"dialog hidden\">\n          <div class=\"dialog-content\">\n            <p id=\"dialog-message\"></p>\n            <button id=\"dialog-yes\" class=\"dialog-btn\">Yes</button>\n            <button id=\"dialog-no\" class=\"dialog-btn\">No</button>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  connectedCallback() {\n    if (this.initialized) return;\n    \n    // Use MutationObserver to ensure DOM elements are ready\n    const observer = new MutationObserver((mutations, obs) => {\n      const appElement = this.querySelector('#app');\n      if (appElement) {\n        this.initializePageBuilder();\n        obs.disconnect(); // Stop observing once initialized\n        this.initialized = true;\n      }\n    });\n\n    observer.observe(this, {\n      childList: true,\n      subtree: true\n    });\n  }\n\n  private initializePageBuilder() {\n    try {\n      this.pageBuilder = new PageBuilder();\n      \n      // Wait for next frame to ensure DOM is ready\n      requestAnimationFrame(() => {\n        if (typeof this.pageBuilder.setupInitialComponents === 'function') {\n          this.pageBuilder.setupInitialComponents();\n          console.log('✅ PageBuilder initialized successfully');\n        } else {\n          console.error('❌ setupInitialComponents is not a function');\n        }\n      });\n    } catch (error) {\n      console.error('❌ Failed to initialize PageBuilder:', error);\n    }\n  }\n\n  disconnectedCallback() {\n    // Cleanup when component is removed\n    this.initialized = false;\n    console.log('❌ PageBuilderComponent disconnected from the DOM');\n  }\n}\n\n// Register the custom element\nif (!customElements.get('page-builder')) {\n  customElements.define('page-builder', PageBuilderComponent);\n  console.log('✅ Custom element \"page-builder\" registered');\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,yBAA4B;AAErB,IAAM,uBAAN,cAAmC,YAAY;AAAA,EAIpD,cAAc;AACZ,UAAM;AAHR,SAAQ,cAAc;AAMpB,SAAK,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmBnB;AAAA,EAEA,oBAAoB;AAClB,QAAI,KAAK;AAAa;AAGtB,UAAM,WAAW,IAAI,iBAAiB,CAAC,WAAW,QAAQ;AACxD,YAAM,aAAa,KAAK,cAAc,MAAM;AAC5C,UAAI,YAAY;AACd,aAAK,sBAAsB;AAC3B,YAAI,WAAW;AACf,aAAK,cAAc;AAAA,MACrB;AAAA,IACF,CAAC;AAED,aAAS,QAAQ,MAAM;AAAA,MACrB,WAAW;AAAA,MACX,SAAS;AAAA,IACX,CAAC;AAAA,EACH;AAAA,EAEQ,wBAAwB;AAC9B,QAAI;AACF,WAAK,cAAc,IAAI,+BAAY;AAGnC,4BAAsB,MAAM;AAC1B,YAAI,OAAO,KAAK,YAAY,2BAA2B,YAAY;AACjE,eAAK,YAAY,uBAAuB;AACxC,kBAAQ,IAAI,6CAAwC;AAAA,QACtD,OAAO;AACL,kBAAQ,MAAM,iDAA4C;AAAA,QAC5D;AAAA,MACF,CAAC;AAAA,IACH,SAAS,OAAP;AACA,cAAQ,MAAM,4CAAuC,KAAK;AAAA,IAC5D;AAAA,EACF;AAAA,EAEA,uBAAuB;AAErB,SAAK,cAAc;AACnB,YAAQ,IAAI,uDAAkD;AAAA,EAChE;AACF;AAGA,IAAI,CAAC,eAAe,IAAI,cAAc,GAAG;AACvC,iBAAe,OAAO,gBAAgB,oBAAoB;AAC1D,UAAQ,IAAI,iDAA4C;AAC1D;","names":[]}