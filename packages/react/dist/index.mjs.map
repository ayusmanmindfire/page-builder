{"version":3,"sources":["../src/components/PageBuilder.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport { PageBuilder } from '@mindfiredigital/page-builder-core/dist/PageBuilder.js';\r\n\r\nexport interface PageBuilderWrapperProps {\r\n  onInitialize?: (pageBuilder: PageBuilder) => void;\r\n  customStyles?: {\r\n    wrapper?: React.CSSProperties;\r\n    sidebar?: React.CSSProperties;\r\n    canvas?: React.CSSProperties;\r\n    customization?: React.CSSProperties;\r\n  };\r\n}\r\n\r\nexport const PageBuilderWrapper: React.FC<PageBuilderWrapperProps> = ({ \r\n  onInitialize,\r\n  customStyles = {}\r\n}) => {\r\n  const pageBuilderRef = useRef<PageBuilder | null>(null);\r\n  const wrapperRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    // Function to set up the DOM structure\r\n    const setupDOMStructure = () => {\r\n      if (!wrapperRef.current) return;\r\n\r\n      // Clear existing content\r\n      wrapperRef.current.innerHTML = '';\r\n\r\n      // Create the main app container\r\n      const appDiv = document.createElement('div');\r\n      appDiv.id = 'app';\r\n\r\n      // Create required inner elements\r\n      appDiv.innerHTML = \r\n      `\r\n        <div id=\"sidebar\"></div>\r\n        <div id=\"canvas\" class=\"canvas\"></div>\r\n        <div id=\"customization\">\r\n          <h4 id=\"component-name\">Component: None</h4>\r\n          <div id=\"controls\"></div>\r\n          <div id=\"layers-view\" class=\"hidden\"></div>\r\n        </div>\r\n        <div id=\"notification\" class=\"notification hidden\"></div>\r\n        <div id=\"dialog\" class=\"dialog hidden\">\r\n          <div class=\"dialog-content\">\r\n            <p id=\"dialog-message\"></p>\r\n            <button id=\"dialog-yes\" class=\"dialog-btn\">Yes</button>\r\n            <button id=\"dialog-no\" class=\"dialog-btn\">No</button>\r\n          </div>\r\n        </div>`\r\n      ;\r\n\r\n      wrapperRef.current.appendChild(appDiv);\r\n    };\r\n\r\n    // Initialize PageBuilder after DOM setup\r\n    const initializePageBuilder = () => {\r\n      try {\r\n        if (!pageBuilderRef.current) {\r\n          setupDOMStructure();\r\n\r\n          // Create new PageBuilder instance\r\n          const pageBuilder = new PageBuilder();\r\n          pageBuilderRef.current = pageBuilder;\r\n\r\n          if (onInitialize) {\r\n            onInitialize(pageBuilder);\r\n          }\r\n\r\n          // Trigger DOMContentLoaded to initialize PageBuilder\r\n          const event = new Event('DOMContentLoaded');\r\n          document.dispatchEvent(event);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error initializing PageBuilder:', error);\r\n      }\r\n    };\r\n\r\n    // Small delay to ensure React has finished rendering\r\n    setTimeout(initializePageBuilder, 0);\r\n\r\n    return () => {\r\n      pageBuilderRef.current = null;\r\n    };\r\n  }, [onInitialize]);\r\n\r\n  return (\r\n    <div \r\n      ref={wrapperRef}\r\n      style={{ \r\n        margin: 'auto', \r\n        width: '100%', \r\n        height: '100%',\r\n        ...customStyles.wrapper \r\n      }}\r\n    />\r\n  );\r\n}"],"mappings":";AAAA,OAAO,SAAS,WAAW,cAAc;AACzC,SAAS,mBAAmB;AAYrB,IAAM,qBAAwD,CAAC;AAAA,EACpE;AAAA,EACA,eAAe,CAAC;AAClB,MAAM;AACJ,QAAM,iBAAiB,OAA2B,IAAI;AACtD,QAAM,aAAa,OAAuB,IAAI;AAE9C,YAAU,MAAM;AAEd,UAAM,oBAAoB,MAAM;AAC9B,UAAI,CAAC,WAAW;AAAS;AAGzB,iBAAW,QAAQ,YAAY;AAG/B,YAAM,SAAS,SAAS,cAAc,KAAK;AAC3C,aAAO,KAAK;AAGZ,aAAO,YACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA,iBAAW,QAAQ,YAAY,MAAM;AAAA,IACvC;AAGA,UAAM,wBAAwB,MAAM;AAClC,UAAI;AACF,YAAI,CAAC,eAAe,SAAS;AAC3B,4BAAkB;AAGlB,gBAAM,cAAc,IAAI,YAAY;AACpC,yBAAe,UAAU;AAEzB,cAAI,cAAc;AAChB,yBAAa,WAAW;AAAA,UAC1B;AAGA,gBAAM,QAAQ,IAAI,MAAM,kBAAkB;AAC1C,mBAAS,cAAc,KAAK;AAAA,QAC9B;AAAA,MACF,SAAS,OAAP;AACA,gBAAQ,MAAM,mCAAmC,KAAK;AAAA,MACxD;AAAA,IACF;AAGA,eAAW,uBAAuB,CAAC;AAEnC,WAAO,MAAM;AACX,qBAAe,UAAU;AAAA,IAC3B;AAAA,EACF,GAAG,CAAC,YAAY,CAAC;AAEjB,SACE;AAAA,IAAC;AAAA;AAAA,MACC,KAAK;AAAA,MACL,OAAO;AAAA,QACL,QAAQ;AAAA,QACR,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,GAAG,aAAa;AAAA,MAClB;AAAA;AAAA,EACF;AAEJ;","names":[]}