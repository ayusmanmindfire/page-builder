{"version":3,"sources":["../src/components/PageBuilder.tsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\n\r\n// Interface defining the structure of dynamic components\r\ninterface DynamicComponents {\r\n  Basic: string[];\r\n  Extra: string[];\r\n  Custom: Record<string, CustomComponentConfig>;\r\n}\r\n\r\ninterface CustomComponentConfig {\r\n  component: any;\r\n  svg?: string; // Optional SVG icon string\r\n  title?: string; // Optional custom title\r\n}\r\n// Props interface for the PageBuilderReact component\r\ninterface PageBuilderReactProps {\r\n  config: DynamicComponents;\r\n}\r\n\r\nexport const PageBuilderReact: React.FC<PageBuilderReactProps> = ({ config }) => {\r\n  const builderRef = useRef<HTMLElement>(null);\r\n\r\n  useEffect(() => {\r\n    import(\"@mindfiredigital/page-builder-web-component\").catch(error => {\r\n      console.error(\"Failed to load web component:\", error);\r\n    });\r\n  }, []);\r\n\r\n  // Convert React components to web components and pass configuration\r\n  useEffect(() => {\r\n    if (builderRef.current) {\r\n      // Create a copy of config to modify\r\n      const modifiedConfig: DynamicComponents = JSON.parse(JSON.stringify(config));\r\n\r\n      // Convert React components in Custom section to web components\r\n      Object.entries(modifiedConfig.Custom).forEach(([key, componentConfig]) => {\r\n        const { component: Component } = componentConfig;\r\n        const tagName = `react-component-${key.toLowerCase()}`;\r\n\r\n        // Create a web component wrapper if it doesn't exist\r\n        if (!customElements.get(tagName)) {\r\n          class ReactComponentElement extends HTMLElement {\r\n            connectedCallback() {\r\n              const mountPoint = document.createElement(\"div\");\r\n              this.appendChild(mountPoint);\r\n              \r\n              // Create React root and render the component\r\n              ReactDOM.createRoot(mountPoint).render(<Component />);\r\n            }\r\n          }\r\n          \r\n          // Define the custom element\r\n          customElements.define(tagName, ReactComponentElement);\r\n        }\r\n\r\n        // Modify the original config to include the tag name\r\n        modifiedConfig.Custom[key] = {\r\n          ...componentConfig,\r\n          component: tagName  // Replace React component with tag name\r\n        };\r\n      });\r\n\r\n      // Set the config data attribute with modified configuration\r\n      builderRef.current.setAttribute(\"config-data\", JSON.stringify(modifiedConfig));\r\n    }\r\n  }, [config]);\r\n\r\n  return <page-builder ref={builderRef} />;\r\n};"],"mappings":";AAAA,OAAO,SAAS,WAAW,cAAc;AACzC,OAAO,cAAc;AAmBd,IAAM,mBAAoD,CAAC,EAAE,OAAO,MAAM;AAC/E,QAAM,aAAa,OAAoB,IAAI;AAE3C,YAAU,MAAM;AACd,WAAO,6CAA6C,EAAE,MAAM,WAAS;AACnE,cAAQ,MAAM,iCAAiC,KAAK;AAAA,IACtD,CAAC;AAAA,EACH,GAAG,CAAC,CAAC;AAGL,YAAU,MAAM;AACd,QAAI,WAAW,SAAS;AAEtB,YAAM,iBAAoC,KAAK,MAAM,KAAK,UAAU,MAAM,CAAC;AAG3E,aAAO,QAAQ,eAAe,MAAM,EAAE,QAAQ,CAAC,CAAC,KAAK,eAAe,MAAM;AACxE,cAAM,EAAE,WAAW,UAAU,IAAI;AACjC,cAAM,UAAU,mBAAmB,IAAI,YAAY;AAGnD,YAAI,CAAC,eAAe,IAAI,OAAO,GAAG;AAChC,gBAAM,8BAA8B,YAAY;AAAA,YAC9C,oBAAoB;AAClB,oBAAM,aAAa,SAAS,cAAc,KAAK;AAC/C,mBAAK,YAAY,UAAU;AAG3B,uBAAS,WAAW,UAAU,EAAE,OAAO,oCAAC,eAAU,CAAE;AAAA,YACtD;AAAA,UACF;AAGA,yBAAe,OAAO,SAAS,qBAAqB;AAAA,QACtD;AAGA,uBAAe,OAAO,GAAG,IAAI;AAAA,UAC3B,GAAG;AAAA,UACH,WAAW;AAAA;AAAA,QACb;AAAA,MACF,CAAC;AAGD,iBAAW,QAAQ,aAAa,eAAe,KAAK,UAAU,cAAc,CAAC;AAAA,IAC/E;AAAA,EACF,GAAG,CAAC,MAAM,CAAC;AAEX,SAAO,oCAAC,kBAAa,KAAK,YAAY;AACxC;","names":[]}